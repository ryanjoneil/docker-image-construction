#!/usr/bin/env python

# Solves DICP a instance using a given technique.

import sys
sys.path.append('.')

from datetime import datetime
from dicp import Problem, Solution
from collections import OrderedDict
from dicp.solvers import ALL_SOLVERS
import os
import shutil

SOLVERS = {solverclass._slug: solverclass for solverclass in ALL_SOLVERS}

if __name__ == '__main__':
    try:
        indir = sys.argv[1]

        # Anything after the solver slug is a kwarg.
        kwargs = OrderedDict()
        for s in sys.argv[3:]:
            comps = s.split('=')
            if len(comps) == 2:
                kwargs[comps[0]] = comps[1]
            else:
                kwargs[s] = True

        # Try and instantiate the solver.
        solver = SOLVERS[sys.argv[2]](**kwargs)

    except IndexError:
        print 'usage: %s instance-dir solver [solver-args]' % sys.argv[0]
        sys.exit(1)

    except KeyError:
        print 'invalid solver'
        sys.exit(1)

    # Load the problem.
    problem = Problem.load(os.path.sep.join([indir, 'input.json']))

    # Where to save the solution files.
    outdir = os.path.sep.join([indir, 'out', solver.slug()])
    if os.path.exists(outdir):
        shutil.rmtree(outdir)
    os.makedirs(outdir)

    # Create a save function the solvers can use to write out incumbents.
    start = datetime.now()
    solution_num = 1

    def saver(schedule):
        global solution_num
        solution = Solution(problem, schedule, datetime.now() - start)
        solution.save(os.path.sep.join([outdir, '%06d.json' % solution_num]))
        solution_num += 1

    solver.solve(problem, saver)
